doctype html
html(lang="en")
    include head.pug
    body
        script(type="text/javascript" src="/scripts/search.js")
        script(type="text/javascript").
            $(document).ready(function () {
                let tasks = !{work};
                console.log(tasks);
                let evts = [];

                let repos = !{JSON.stringify(repos)};

                tasks.forEach(function (item, index) {

                    let repo = null;
                    let issue = null;
                    repos.forEach(function (rep) {
                        rep.issues.forEach(function (i) {
                            if (i.id === item.issue_id) {
                                repo = rep;
                                issue = i;
                            }
                        });
                    });

                    if (repo != null && issue != null) {
                        evts.push({
                            repo: repo.repo.name,
                            title: repo.repo.name + "/" + issue.title,
                            stick: true,
                            start: moment(item.start),
                            end: moment(item.end),
                            issue_id: parseInt(item.issue_id),
                            duration: moment(item.end).subtract(item.start)

                        });
                    }
                });

                /* initialize the external events
                -----------------------------------------------------------------*/

                $('#external-events .mdl-navigation__link.ui-draggable.ui-draggable-handle').each(function () {
                    var repo = $(this).prevAll('.mdl-list__item:first').contents().filter(function (a) {
                        return a === 1;
                    }).text();
                    var name = $(this).contents().filter(function (a) {
                        return a === 1;
                    }).text();
                    // store data so the calendar knows to render an event upon drop
                    console.log($(this).data('id'));
                    $(this).data('event', {
                        issue_id: parseInt($(this).data('id')),
                        duration: moment('2:00:00'),
                        title: repo + "/" + name, // use the element's text as the event title
                        stick: true, // maintain when user navigates (see docs on the renderEvent method)

                    });
                    //$(this).data('repo', repo);
                    //$(this).data('name', name);

                    // make the event draggable using jQuery UI
                    $(this).draggable({
                        helper: 'clone',
                        scroll: false,
                        zIndex: 999,
                        revert: true,      // will cause the event to go back to its
                        revertDuration: 0  //  original position after the drag
                    });

                });


                /* initialize the calendar
                -----------------------------------------------------------------*/
                $('#calendar').fullCalendar({
                    header: {
                        left: 'prev,next today',
                        center: 'title',
                        right: 'agendaWeek,agendaDay'
                    },
                    firstDay: moment().day(),
                    slotLabelFormat: 'H:mm', // uppercase H for 24-hour clock
                    defaultView: 'agendaWeek',
                    slotDuration: '00:15:00',
                    allDaySlot: false,
                    timeFormat: 'H:mm',
                    events: evts,
                    editable: true,
                    droppable: true, // this allows things to be dropped onto the calendar
                    eventResize: function (event, delta, revertFunc, jsEvent, ui, view) {
                        console.log("rezise");
                        console.log(event);
                        console.log(delta);
                        let issue_id = parseInt(event.issue_id);
                        let start = event.start.format('YYYY-MM-DD HH:mm:ss');
                        let end = event.end.format('YYYY-MM-DD HH:mm:ss');
                        event.duration = moment(end).subtract(start);
                        console.log("duration update");
                        console.log(event);
                        console.log(
                            {
                                issue_id: issue_id,
                                old_start: start,
                                start: start,
                                end: end
                            });
                        $.ajax({
                            url: "/work/",
                            type: 'PUT',
                            data: {
                                issue_id: issue_id,
                                old_start: start,
                                start: start,
                                end: end
                            }

                        })
                            .done(function () {
                                console.log("success");
                            })
                            .fail(function () {
                                alert("error");
                            })
                            .always(function () {
                                console.log("complete");
                            });
                    },
                    eventDrop: function (event, delta, revertFunc, jsEvent, ui, view) {
                        console.log("drag");
                        console.log(event);
                        console.log(delta);
                        let issue_id = parseInt(event.issue_id);
                        let old_start = moment(event.start).subtract(delta).format('YYYY-MM-DD HH:mm:ss');
                        let start = event.start.format('YYYY-MM-DD HH:mm:ss');
                        let end = moment(event.start).add(event.duration).format('YYYY-MM-DD HH:mm:ss');
                        console.log(
                            {
                                issue_id: issue_id,
                                old_start: old_start,
                                start: start,
                                end: end
                            });
                        $.ajax({
                            url: "/work/",
                            type: 'PUT',
                            data: {
                                issue_id: issue_id,
                                old_start: old_start,
                                start: start,
                                end: end
                            }

                        })
                            .done(function () {
                                console.log("success");
                            })
                            .fail(function () {
                                alert("error");
                            })
                            .always(function () {
                                console.log("complete");
                            });
                    },
                    drop: function (date, jsEvent, ui, resourceId) {
                        let id = $(this).data('id');
                        console.log(id);
                        let start = date.format('YYYY-MM-DD HH:mm:ss');
                        console.log(start);
                        let end = date.clone().add(2, 'hours').format('YYYY-MM-DD HH:mm:ss');
                        console.log(end);
                        $.ajax({
                            url: "/work",
                            type: 'POST',
                            data: {
                                issue_id: id,
                                start: start,
                                end: end
                            }

                        })
                            .done(function () {
                                console.log("success");
                            })
                            .fail(function () {
                                alert("error");
                            })
                            .always(function () {
                                console.log("complete");
                            });
                    }
                });

                $('.fc-toolbar').find('.fc-button').each(function () {
                    if ($(this).text() === "today") {
                        $(this).attr('class', 'fc-button fc-today-button mdl-button mdl-js-button mdl-button--raised mdl-js-ripple-effect');
                    } else {
                        $(this).attr('class', 'fc-button mdl-button mdl-js-button mdl-button--raised mdl-js-ripple-effect');
                    }
                });

                $('.fc-center h2').css('color', '#757575');

                $('#calendar').fullCalendar('scrollTime', '06:00');

            });
        div(class="th-layout mdl-layout mdl-js-layout mdl-layout--fixed-drawer mdl-layout--fixed-header")
            header(class="th-header mdl-layout__header mdl-color--grey-100 mdl-color-text--grey-600")
                div(class="mdl-layout__header-row")
                    span(class="mdl-layout-title") Calendar
                    div(class="mdl-layout-spacer")
                    a(class="mdl-button mdl-js-button mdl-js-ripple-effect mdl-button--icon" href="settings" id="hdrbtn")
                        i(class="material-icons") settings

            div(class="th-drawer mdl-layout__drawer mdl-color--blue-grey-900 mdl-color-text--blue-grey-50")
                header(class="th-drawer-header")
                    img(src=`${user.avatar_url}` class="th-avatar")
                    div(class="th-avatar-dropdown")
                        span #{user.login}
                        div(class="mdl-layout-spacer")
                    div(class="mdl-textfield mdl-js-textfield mdl-textfield--expandable")
                        label(class="mdl-button mdl-js-button mdl-button--icon" for="search")
                            i(class="material-icons") search
                        div(class="mdl-textfield__expandable-holder")
                            input(class="mdl-textfield__input" type="text" id="search" onkeyup="filterSideBar(matchText)")
                            label(class="mdl-textfield__label" for="search") Type your issue name

                nav(class="th-navigation mdl-navigation mdl-color--blue-grey-800" id="external-events")
                    each rep in repos
                        div(class="mdl-list__item" id=`${rep.repo.name}`) <i class="mdl-color-text--blue-grey-400 material-icons" role="presentation">folder</i>#{rep.repo.name}
                        each issue in rep.issues
                            div(class=`mdl-navigation__link ui-draggable ui-draggable-handle ${rep.repo.name}` data-id=`${issue.id}`) <i class="mdl-color-text--blue-grey-400 material-icons" role="presentation">error_outline</i>#{issue.title}
                    div(class="mdl-layout-spacer")
                    a(class="mdl-navigation__link" href=`${HELP_PAGE_URL}`) <i class="mdl-color-text--blue-grey-400 material-icons" role="presentation">help_outline</i><span class="visuallyhidden">Help</span>

            main(class="mdl-layout__content mdl-color--grey-100")
                div(id='calendar')


        script(src="https://code.getmdl.io/1.3.0/material.min.js")
